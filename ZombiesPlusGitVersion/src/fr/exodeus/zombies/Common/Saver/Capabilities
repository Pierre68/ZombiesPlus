package fr.exodeus.zombies.Common.Saver;

import java.util.concurrent.Callable;

import fr.exodeus.zombies.Common.MainZombies;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.nbt.NBTBase;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.EnumFacing;
import net.minecraftforge.common.capabilities.Capability;
import net.minecraftforge.common.capabilities.CapabilityManager;
import net.minecraftforge.common.capabilities.ICapabilityProvider;
import net.minecraftforge.common.util.INBTSerializable;

public class Capabilities implements ICapabilityProvider, INBTSerializable<NBTTagCompound> {
    @Override
    public boolean hasCapability(Capability<?> capability, EnumFacing facing) {
        return MainZombies.TUTO_CAP != null && capability == MainZombies.TUTO_CAP;
    }

    @Override
    public <T> T getCapability(Capability<T> capability, EnumFacing facing) {
        return MainZombies.TUTO_CAP != null && capability == MainZombies.TUTO_CAP ? (T) this : null;
    }
    
    // =============================================================================================
    
    public static String THIRST_CAP = "ThirstLevel";

    @Override
    public NBTTagCompound serializeNBT() {
        NBTTagCompound compound = new NBTTagCompound();
        compound.setFloat(THIRST_CAP, this.getThirst());
        return compound;
    }

    @Override
    public void deserializeNBT(NBTTagCompound compound) {
        this.setThirst(compound.getFloat(THIRST_CAP));
    }

    public float thirst;

    public void setThirst(float money) {
        this.thirst = money;
    }

    public float getThirst() {
        return this.thirst;
    }
    
    public static void register() { // Put in initialization !
        CapabilityManager.INSTANCE.register(Capabilities.class, new Capabilities.Storage(), new Capabilities.Factory());
    }

    public Capabilities(EntityPlayer player) {
        this.thirst = 0;
        this.player = player;
    }

    public void sync() {
        PacketCapabilities packet = new PacketCapabilities(this.getThirst());
        if (!this.player.worldObj.isRemote) {
            EntityPlayerMP playerMP = (EntityPlayerMP) player;
            MainZombies.proxy.network.sendTo(packet, playerMP);
        } else {
            MainZombies.proxy.network.sendToServer(packet);
        }
    }
    
    // =============================================================================================

    public static class Storage implements Capability.IStorage<Capabilities> {

        @Override
        public NBTBase writeNBT(Capability<Capabilities> capability, Capabilities instance, EnumFacing side) {
            return null;
        }

        @Override
        public void readNBT(Capability<Capabilities> capability, Capabilities instance, EnumFacing side, NBTBase nbt) {

        }

    }
    private EntityPlayer player;

    
    public static class Factory implements Callable<Capabilities> {
        @Override
        public Capabilities call() throws Exception {
            return null;
        }
    }

    /*public void doobleSync() {
        PacketCapabilities packet = new PacketCapabilities(this.getThirst());

        EntityPlayerMP playerMP = (EntityPlayerMP) player;
        MainZombies.network.sendTo(packet, playerMP);

        MainZombies.network.sendToServer(packet);

    }*/ 

}
